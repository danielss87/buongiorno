"""
Buongiorno - Script de teste de depend√™ncias
Verifica se todas as bibliotecas necess√°rias est√£o instaladas
"""

def test_import(module_name, package_name=None):
    """
    Testa importa√ß√£o de um m√≥dulo
    
    Args:
        module_name (str): Nome do m√≥dulo para importar
        package_name (str): Nome do pacote para pip (se diferente do m√≥dulo)
    """
    if package_name is None:
        package_name = module_name
    
    try:
        module = __import__(module_name)
        version = getattr(module, '__version__', 'unknown')
        print(f"‚úÖ {package_name:20s} - vers√£o {version}")
        return True
    except ImportError:
        print(f"‚ùå {package_name:20s} - N√ÉO INSTALADO")
        print(f"   Instale com: pip install {package_name}")
        return False

def main():
    """Testa todas as depend√™ncias"""
    print("\n" + "="*70)
    print("üîç VERIFICA√á√ÉO DE DEPEND√äNCIAS - PROJETO BUONGIORNO")
    print("="*70 + "\n")
    
    dependencies = [
        ('pandas', None),
        ('numpy', None),
        ('yfinance', None),
        ('sklearn', 'scikit-learn'),
        ('statsmodels', None),
    ]
    
    results = []
    
    print("üì¶ Bibliotecas Essenciais:")
    print("-"*70)
    
    for module_name, package_name in dependencies:
        result = test_import(module_name, package_name)
        results.append(result)
    
    print("\n" + "="*70)
    
    # Resumo
    total = len(results)
    installed = sum(results)
    missing = total - installed
    
    if missing == 0:
        print("‚úÖ TODAS AS DEPEND√äNCIAS EST√ÉO INSTALADAS!")
        print(f"   {installed}/{total} bibliotecas prontas para uso")
    else:
        print(f"‚ö†Ô∏è  FALTAM {missing} DEPEND√äNCIAS!")
        print(f"   {installed}/{total} bibliotecas instaladas")
        print("\nüí° Para instalar tudo de uma vez:")
        print("   pip install pandas numpy yfinance scikit-learn statsmodels")
    
    print("="*70 + "\n")
    
    # Testes adicionais
    if all(results):
        print("üß™ Testando funcionalidades b√°sicas...")
        print("-"*70)
        
        try:
            import pandas as pd
            import numpy as np
            
            # Teste pandas
            df = pd.DataFrame({'A': [1, 2, 3]})
            print(f"‚úÖ Pandas funcionando - DataFrame criado com {len(df)} linhas")
            
            # Teste numpy
            arr = np.array([1, 2, 3])
            print(f"‚úÖ NumPy funcionando - Array criado com {len(arr)} elementos")
            
            # Teste yfinance
            import yfinance as yf
            print(f"‚úÖ yfinance importado - Pronto para buscar dados")
            
            # Teste scikit-learn
            from sklearn.metrics import mean_absolute_error
            print(f"‚úÖ scikit-learn funcionando - M√©tricas dispon√≠veis")
            
            # Teste statsmodels
            from statsmodels.tsa.arima.model import ARIMA
            print(f"‚úÖ statsmodels funcionando - ARIMA dispon√≠vel")
            
            print("-"*70)
            print("\nüéâ TUDO PRONTO! Voc√™ pode rodar o pipeline agora!")
            print("   Execute: python run_pipeline.py")
            
        except Exception as e:
            print(f"\n‚ö†Ô∏è  Erro ao testar funcionalidades: {e}")
    
    print("\n")

if __name__ == "__main__":
    main()
